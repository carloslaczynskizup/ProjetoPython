import yfinance as yf;  # Importa a biblioteca yfinance com o apelido 'yf'
from prophet import Prophet;  # Importa a classe Prophet da biblioteca prophet
from prophet.plot import plot_plotly;  # Importa a função plot_plotly da biblioteca prophet.plot
import plotly.graph_objects as go;  # Importa a classe graph_objects da biblioteca plotly

# Solicita ao usuário que insira o código da ação para análise
ticker = input("Digite o código da ação para análise: ");

# Busca os dados históricos da ação usando a biblioteca yfinance
dados = yf.Ticker(ticker).history("2y");

# Tratando os dados
treinamento = dados.reset_index();  # Reseta o índice da tabela
treinamento = treinamento[["Date", "Close"]]  # Seleciona as colunas "Date" e "Close"
treinamento["Date"] = treinamento["Date"].dt.date;  # Converte a coluna "Date" para o formato de data
treinamento.columns = ["ds", "y"];  # Renomeia as colunas para "ds" e "y"
print(treinamento);

# Criando e treinando o modelo de Machine Learning usando a biblioteca Prophet
modelo = Prophet();  # Cria uma instância do modelo Prophet

modelo.fit(treinamento);  # Treina o modelo usando os dados de treinamento

# Criando o período de previsão
periodo = modelo.make_future_dataframe(90);  # Cria um DataFrame com datas futuras (90 meses)

# Criando as previsões usando o modelo treinado
previsoes = modelo.predict(periodo);

# Plotando as previsões
plotagem = plot_plotly(modelo, previsoes);  # Cria uma plotagem interativa com as previsões
fig = go.Figure(data=plotagem);  # Cria uma figura usando as previsões

# Adiciona uma série de dispersão (Scatter) ao gráfico com os valores previstos
fig.add_trace(go.Scatter(x=previsoes.ds, y=previsoes.yhat));

# Escreve o gráfico interativo em um arquivo HTML
fig.write_html("previsao.html");

# Escreve o gráfico como uma imagem PNG
fig.write_image("previsao.png");
